{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "regenerate_post_part",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -200,
        -600
      ],
      "id": "webhook-regenerate",
      "name": "Webhook - Regenerate Part",
      "webhookId": "regenerate-post-webhook-id"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-title",
              "leftValue": "={{ $json.body.action }}",
              "rightValue": "regenerate_title",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        0,
        -600
      ],
      "id": "check-action-type",
      "name": "Check Action Type"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.firecrawl.dev/v2/scrape",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer fc-eaaac2f63b0443f891a1491f1e42d4f6"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"url\": \"{{ $json.body.link }}\",\n  \"onlyMainContent\": true,\n  \"maxAge\": 172800000,\n  \"parsers\": [\n    \"pdf\"\n  ],\n  \"formats\": [\n    \"markdown\"\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        -720
      ],
      "id": "scrape-content",
      "name": "Scrape Content"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data.markdown }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "Ты копирайтер финтех-канала FINTECH. Твоя задача - перегенерировать ТОЛЬКО заголовок поста.\n\nТекущий пост:\nЗаголовок: {{ $('Webhook - Regenerate Part').item.json.body.current_title }}\nТекст: {{ $('Webhook - Regenerate Part').item.json.body.current_text }}\n\nСТИЛЬ КАНАЛА:\n- Дерзкий, но профессиональный\n- Прямой и без воды  \n- С долей сарказма где уместно\n- Фокус на практических последствиях для бизнеса/пользователей\n\nТЕХНИКИ ТРИГГЕРНЫХ ЗАГОЛОВКОВ:\n1. СТРАХ: \"ЦБ запретил...\", \"Блокировка грозит...\", \"Штрафы за...\"\n2. ЖАДНОСТЬ: \"Как заработать на...\", \"Новый способ...\", \"Обходим...\"\n3. ЛЮБОПЫТСТВО: \"Почему Сбер боится...\", \"Что скрывает...\", \"Секрет...\"\n4. СРОЧНОСТЬ: \"До конца месяца...\", \"Последний шанс...\", \"Срочно меняй...\"\n5. СКАНДАЛ: \"Разгром...\", \"Провал...\", \"Скандал в...\"\n6. ЦИФРЫ: \"73% россиян...\", \"На 500% выросли...\", \"Потеряли $2 млрд...\"\n\nВЫХОДНОЙ ФОРМАТ (ТОЛЬКО JSON):\n{\"new_title\": \"новый триггерный заголовок\"}\n\nВАЖНО:\n- Создай ДРУГОЙ заголовок, отличный от текущего\n- НЕ используй clickbait без основания\n- Заголовок должен отражать суть новости\n- Добавляй эмодзи, но не переборщи (1-2 штуки максимум)\n\nverify that json valid"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        480,
        -720
      ],
      "id": "regenerate-title-ai",
      "name": "Regenerate Title AI"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data.markdown }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "Ты копирайтер финтех-канала FINTECH. Твоя задача - перегенерировать ТОЛЬКО текст поста.\n\nТекущий пост:\nЗаголовок: {{ $('Webhook - Regenerate Part').item.json.body.current_title }}\nТекст: {{ $('Webhook - Regenerate Part').item.json.body.current_text }}\n\nСТИЛЬ КАНАЛА:\n- Дерзкий, но профессиональный\n- Прямой и без воды  \n- С долей сарказма где уместно\n- Фокус на практических последствиях для бизнеса/пользователей\n\nТРЕБОВАНИЯ К ТЕКСТУ:\n- Краткий текст до 500 символов\n- С эмодзи (1-3 штуки)\n- Цепляющий и информативный\n- Без воды и лишних слов\n- Фокус на практической пользе для читателя\n\nВЫХОДНОЙ ФОРМАТ (ТОЛЬКО JSON):\n{\"new_text\": \"новый текст поста до 500 символов с эмодзи\"}\n\nВАЖНО:\n- Создай ДРУГОЙ текст, отличный от текущего\n- Сохрани стиль канала\n- Текст должен дополнять заголовок\n- Добавь призыв к действию где уместно\n\nverify that json valid"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        480,
        -480
      ],
      "id": "regenerate-text-ai",
      "name": "Regenerate Text AI"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-5-sonnet-20241022",
          "mode": "list",
          "cachedResultName": "Claude Sonnet 3.5 (New)"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        680,
        -600
      ],
      "id": "anthropic-model",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "Z0mUETErqCeBju8F",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Парсим результат от AI и отправляем простой результат\nconst items = $input.all();\nconst updatedItems = items.map((item) => {\n  try {\n    const aiOutput = JSON.parse(item?.json?.output);\n    const webhookData = $('Webhook - Regenerate Part').item.json.body;\n    \n    let result = {\n      action: webhookData.action\n    };\n    \n    // Добавляем только новую сгенерированную часть\n    if (webhookData.action === 'regenerate_title') {\n      result.new_title = aiOutput.new_title;\n    } else if (webhookData.action === 'regenerate_text') {\n      result.new_text = aiOutput.new_text;\n    }\n    \n    return { json: result };\n  } catch (error) {\n    return { \n      json: { \n        error: 'Failed to parse AI output', \n        details: error.message,\n        raw_output: item?.json?.output \n      } \n    };\n  }\n});\n\nreturn updatedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -600
      ],
      "id": "process-result",
      "name": "Process Result"
    }
  ],
  "connections": {
    "Webhook - Regenerate Part": {
      "main": [
        [
          {
            "node": "Check Action Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Action Type": {
      "main": [
        [
          {
            "node": "Scrape Content",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Scrape Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Content": {
      "main": [
        [
          {
            "node": "Regenerate Title AI",
            "type": "main",
            "index": 0
          },
          {
            "node": "Regenerate Text AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Regenerate Title AI": {
      "main": [
        [
          {
            "node": "Process Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Regenerate Text AI": {
      "main": [
        [
          {
            "node": "Process Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Regenerate Title AI",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Regenerate Text AI",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }

  },
  "pinData": {},
  "meta": {
    "instanceId": "regenerate-post-parts-flow"
  }
}
