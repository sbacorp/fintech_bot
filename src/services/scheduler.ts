import cron from 'node-cron';
import { BotInstance } from '../bot/index.js';
import { NewsService } from './news-service.js';
import { logger } from '../utils/logger.js';
import { config } from '../config/index.js';
import { channelService } from './channel-service.js';
import axios from 'axios';


export class SchedulerService {
  private bot: BotInstance | null = null;
  private newsService: NewsService;
  private tasks: Map<string, cron.ScheduledTask> = new Map();

  constructor(bot?: BotInstance) {
    if (bot) {
      this.bot = bot;
    }
    // NewsService –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    this.newsService = new NewsService('');
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç bot –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
   */
  setBot(bot: BotInstance): void {
    this.bot = bot;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
   */
  start(): void {
    this.startDailyNewsTask();
    logger.info('scheduler service started');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
   */
  stop(): void {
    for (const [name, task] of this.tasks) {
      task.stop();
      logger.info(`stopped scheduled task: ${name}`);
    }
    this.tasks.clear();
    logger.info('scheduler service stopped');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ 12:00
   */
  private startDailyNewsTask(): void {
    // –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 1:50
    const cronExpression = '27 1 * * *';
    
    const task = cron.schedule(cronExpression, async () => {
      await this.handleDailyNews();
    }, {
      timezone: 'Europe/Moscow', // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
    });

    this.tasks.set('daily-news', task);

    logger.info({
      msg: 'daily news task scheduled',
      cronExpression,
      timezone: 'Europe/Moscow',
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
   */
  private async handleDailyNews(): Promise<void> {
    try {
      logger.info('executing daily news task');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
      const channels = channelService.getAllChannels();
      
      if (channels.length === 0) {
        logger.warn('no channels configured for daily news task');
        await this.notifyAdminsAboutError('–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
        return;
      }

      const results = [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
      for (const channel of channels) {
        try {
          logger.info({
            msg: 'processing channel for daily news',
            channelId: channel.id,
            channelName: channel.name
          });

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
          if (!channelService.supportsSearch(channel)) {
            logger.warn({
              msg: 'channel does not support search, skipping',
              channelId: channel.id,
              channelName: channel.name
            });
            continue;
          }

          // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
          const searchUrl = channelService.getSearchUrl(channel);
          if (!searchUrl) {
            logger.warn({
              msg: 'no search URL configured for channel, skipping',
              channelId: channel.id,
              channelName: channel.name
            });
            continue;
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ n8n flow (–∫–∞–∫ –≤ /get_posts)
          const searchResponse = await axios.post(searchUrl, {
            channelId: channel.id,
            channelName: channel.name,
            userId: config.MAIN_CONTENT_CREATOR_ID, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä–∞
            action: 'search_news'
          }, {
            timeout: 30000,
            headers: {
              'Content-Type': 'application/json',
              'User-Agent': 'FintechBot/1.0'
            }
          });

          results.push({
            channelId: channel.id,
            channelName: channel.name,
            success: true,
            searchStatus: searchResponse.status
          });

          logger.info({
            msg: 'N8N search flow triggered successfully for channel',
            channelId: channel.id,
            channelName: channel.name,
            searchStatus: searchResponse.status,
            searchData: searchResponse.data,
          });

        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          
          results.push({
            channelId: channel.id,
            channelName: channel.name,
            error: errorMessage,
            success: false
          });

          logger.error({
            msg: 'channel processing exception',
            channelId: channel.id,
            channelName: channel.name,
            error: errorMessage
          });
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const successfulChannels = results.filter(r => r.success).length;
      
      if (successfulChannels > 0) {
        logger.info({
          msg: 'daily news search triggered successfully',
          channelsTriggered: successfulChannels,
          totalChannels: channels.length
        });

        await this.notifyAdminsAboutTask({
          totalNews: 0, // –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏–¥—É—Ç –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ webhook
          totalMessages: 0,
          results
        });
      } else {
        logger.error({
          msg: 'daily news task failed - no channels triggered successfully',
          results
        });

        await this.notifyAdminsAboutError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞');
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      
      logger.error({
        msg: 'daily news task exception',
        error: errorMessage,
      });

      await this.notifyAdminsAboutError(errorMessage);
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
   */
  private async notifyAdminsAboutTask(result: { 
    totalNews: number; 
    totalMessages: number; 
    results?: Array<{
      channelId: string;
      channelName: string;
      newsCount?: number;
      messagesCount?: number;
      error?: string | undefined;
      success: boolean;
    }>;
  }): Promise<void> {
    const mainCreatorId = config.MAIN_CONTENT_CREATOR_ID;

    let message = `üïõ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω\n\n` +
                  `üì° –ó–∞–ø—É—â–µ–Ω–æ –ø–æ–∏—Å–∫–æ–≤: ${result.results?.filter(r => r.success).length || 0}\n` +
                  `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}\n\n` +
                  `‚è≥ –ù–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
    if (result.results && result.results.length > 0) {
      message += `\n\nüìä **–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n`;
      
      for (const channelResult of result.results) {
        if (channelResult.success) {
          message += `‚úÖ **${channelResult.channelName}**: –ø–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω\n`;
        } else {
          message += `‚ùå **${channelResult.channelName}**: ${channelResult.error || '–û—à–∏–±–∫–∞'}\n`;
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message += `\n\nüéØ **–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:**\n`;
    message += `1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª: /select_channel\n`;
    message += `2Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: /view_posts\n`;
    message += `3Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–æ—Å—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n`;
    message += `üí° –ü–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞!`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä—É
    if (mainCreatorId) {
      try {
        await this.bot?.api.sendMessage(mainCreatorId, message, {
          parse_mode: 'HTML',
        });
        logger.info({
          msg: 'notified main content creator about task completion',
          mainCreatorId,
        });
      } catch (error) {
        logger.error({
          msg: 'failed to notify main content creator about task completion',
          mainCreatorId,
          error: error instanceof Error ? error.message : String(error),
        });
      }
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ –≤ –∑–∞–¥–∞—á–µ
   */
  private async notifyAdminsAboutError(error: string): Promise<void> {
    const adminIds = config.BOT_ADMIN_USER_IDS;
    const mainCreatorId = config.MAIN_CONTENT_CREATOR_ID;

    const message = `‚ùå –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n` +
                   `üö® –û—à–∏–±–∫–∞: ${error}\n` +
                   `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}\n\n` +
                   `üîß **–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:**\n` +
                   `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ n8n webhook\n` +
                   `‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n` +
                   `‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é: /cron_test`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä—É
    if (mainCreatorId && this.bot) {
      try {
        await this.bot.api.sendMessage(mainCreatorId, message, {
          parse_mode: 'HTML',
        });
        logger.info({
          msg: 'notified main content creator about task error',
          mainCreatorId,
        });
      } catch (error) {
        logger.error({
          msg: 'failed to notify main content creator about task error',
          mainCreatorId,
          error: error instanceof Error ? error.message : String(error),
        });
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
    if (!adminIds || adminIds.length === 0) {
      return;
    }

    for (const adminId of adminIds) {
      try {
        if (this.bot) {
          await this.bot.api.sendMessage(adminId, message, {
            parse_mode: 'HTML',
          });
        }
      } catch (error) {
        logger.error({
          msg: 'failed to notify admin about task error',
          adminId,
          error: error instanceof Error ? error.message : String(error),
        });
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
   */
  getTasksInfo(): Array<{ name: string; running: boolean; nextRun: string | null }> {
    const tasksInfo = [];

    for (const [name, task] of this.tasks) {
      tasksInfo.push({
        name,
        running: true, // –°—á–∏—Ç–∞–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ
        nextRun: new Date().toISOString(), // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
      });
    }

    return tasksInfo;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
   */
  async runNewsTaskNow(): Promise<{ 
    success: boolean; 
    totalNews: number; 
    totalMessages: number; 
    error?: string;
    results?: Array<{
      channelId: string;
      channelName: string;
      newsCount?: number;
      messagesCount?: number;
      error?: string | undefined;
      success: boolean;
    }>;
  }> {
    logger.info('manually triggering news task');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    const channels = channelService.getAllChannels();
    
    if (channels.length === 0) {
      return {
        success: false,
        totalNews: 0,
        totalMessages: 0,
        error: '–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤'
      };
    }

    let totalNews = 0;
    let totalMessages = 0;
    const results = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
    for (const channel of channels) {
      try {
        logger.info({
          msg: 'processing channel for manual news task',
          channelId: channel.id,
          channelName: channel.name
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        if (!channelService.supportsSearch(channel)) {
          logger.warn({
            msg: 'channel does not support search, skipping',
            channelId: channel.id,
            channelName: channel.name
          });
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        const searchUrl = channelService.getSearchUrl(channel);
        if (!searchUrl) {
          logger.warn({
            msg: 'no search URL configured for channel, skipping',
            channelId: channel.id,
            channelName: channel.name
          });
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π NewsService –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        const channelNewsService = new NewsService(searchUrl);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–Ω–∞–ª–∞
        const result = await channelNewsService.fetchAndProcessNews();

        if (result.success) {
          totalNews += result.totalNews;
          totalMessages += result.messages.length;
          
          results.push({
            channelId: channel.id,
            channelName: channel.name,
            newsCount: result.totalNews,
            messagesCount: result.messages.length,
            success: true
          });

          logger.info({
            msg: 'channel processed successfully',
            channelId: channel.id,
            channelName: channel.name,
            newsCount: result.totalNews,
            messagesCount: result.messages.length
          });
        } else {
          results.push({
            channelId: channel.id,
            channelName: channel.name,
            error: result.error,
            success: false
          });

          logger.error({
            msg: 'channel processing failed',
            channelId: channel.id,
            channelName: channel.name,
            error: result.error
          });
        }

      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        
        results.push({
          channelId: channel.id,
          channelName: channel.name,
          error: errorMessage,
          success: false
        });

        logger.error({
          msg: 'channel processing exception',
          channelId: channel.id,
          channelName: channel.name,
          error: errorMessage
        });
      }
    }

    const success = totalNews > 0;
    
    return {
      success,
      totalNews,
      totalMessages,
      results,
      ...(!success && { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞' })
    };
  }
}
