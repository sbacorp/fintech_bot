import { InlineKeyboard } from "grammy";
import { Context } from "grammy";

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ—Å—Ç–∞
 */
export interface PostData {
  original_title: string;
  trigger_title: string;
  post_text: string;
  hashtags?: string[];
  urgency_reason?: string;
  main_post_image?: string;
}

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞
 */
export interface PostDisplayOptions {
  showRegenerateButtons?: boolean;
  showEditButtons?: boolean;
  showHashtagButtons?: boolean;
  showPublishButtons?: boolean;
  isUpdated?: boolean;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ü–∏–π
 */
export function createPostKeyboard(options: PostDisplayOptions = {}): InlineKeyboard {
  const {
    showRegenerateButtons = true,
    showEditButtons = true,
    showHashtagButtons = true,
    showPublishButtons = true
  } = options;

  const keyboard = new InlineKeyboard();

  if (showRegenerateButtons) {
    keyboard.text("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫", "regenerate_title");
  }
  
  if (showEditButtons) {
    if (showRegenerateButtons) {
      keyboard.text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫", "edit_title");
    } else {
      keyboard.text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫", "edit_title");
    }
  }
  
  if (showRegenerateButtons || showEditButtons) {
    keyboard.row();
  }

  if (showRegenerateButtons) {
    keyboard.text("üìù –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "regenerate_description");
  }
  
  if (showEditButtons) {
    if (showRegenerateButtons) {
      keyboard.text("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "edit_text");
    } else {
      keyboard.text("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "edit_text");
    }
  }
  
  if (showRegenerateButtons || showEditButtons) {
    keyboard.row();
  }

  if (showHashtagButtons) {
    keyboard.text("üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏", "edit_hashtags");
    keyboard.row();
  }

  if (showPublishButtons) {
    keyboard.text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "publish_post");
    keyboard.text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_post");
  }

  return keyboard;
}

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞
 */
export function formatPostMessage(post: PostData, options: PostDisplayOptions = {}): string {
  const { isUpdated = false } = options;
  
  let postMessage = `üéØ **–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å:**${isUpdated ? ' *(–æ–±–Ω–æ–≤–ª–µ–Ω–æ)*' : ''}\n\n`;
  postMessage += `üì∞ **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:**\n${post.original_title}\n\n`;
  postMessage += `‚ö° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:**\n${post.trigger_title}\n\n`;
  postMessage += `üìù **–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:**\n${post.post_text}\n\n`;
  
  if (post.hashtags && post.hashtags.length > 0) {
    postMessage += `üè∑Ô∏è **–•–µ—à—Ç–µ–≥–∏:** ${post.hashtags.join(', ')}\n\n`;
  }
  
  if (post.urgency_reason) {
    postMessage += `üî• **–ü—Ä–∏—á–∏–Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏:**\n${post.urgency_reason}\n\n`;
  }

  return postMessage;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
 */
export async function displayPost(
  ctx: Context, 
  post: PostData, 
  options: PostDisplayOptions = {}
): Promise<void> {
  const message = formatPostMessage(post, options);
  const keyboard = createPostKeyboard(options);

  await ctx.reply(message, {
    parse_mode: "Markdown",
    reply_markup: keyboard
  });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º
 */
export async function updatePostMessage(
  ctx: Context, 
  post: PostData, 
  options: PostDisplayOptions = {}
): Promise<void> {
  const message = formatPostMessage(post, { ...options, isUpdated: true });
  const keyboard = createPostKeyboard(options);

  try {
    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
  } catch (error) {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
  }
}
