import { autoRetry } from "@grammyjs/auto-retry";
import { session, Bot as TelegramBot } from "grammy";
import { botAdminFeature, welcomeFeature } from "./features/index.js";
import { config } from "../config/index.js";
import { logger } from "../utils/logger.js";
import { getPostsCommand } from "./handlers/commands/get-posts.js";
import { viewPostsCommand } from "./handlers/commands/view-posts.js";
// import {
//   testPostCommand,
//   testPostWithImageCommand,
//   checkChannelCommand
// } from "./handlers/commands/test-post.js";
import {
  clearStateCommand,
  statusCommand,
} from "./handlers/commands/clear-state.js";
import {
  selectChannelCommand,
  handleChannelSelection,
} from "./handlers/commands/select-channel.js";
import { addChannelCommand } from "./handlers/commands/add-channel.js";
import { cronTestCommand } from "./handlers/commands/cron-test.js";
import { createSupabaseStorageAdapter } from "../services/supabase-storage-adapter.js";

import { MyContext, SessionData } from "../types/context.js";
import { conversations, createConversation } from "@grammyjs/conversations";
import { newsSelectionConversation } from "./conversations/news-selection.js";
import {
  editTitleConversation,
  editTextConversation,
  editHashtagsConversation,
} from "./conversations/manual-edit.js";
import { addChannelConversation } from "./conversations/add-channel.js";
import { selectChannelConversation } from "./conversations/select-channel.js";
import {
  regenerateTitleHandler,
  regenerateDescriptionHandler,
  publishPostHandler,
  cancelPostHandler,
  editHashtagsHandler,
} from "./handlers/callbacks/news-actions.js";
import {
  runCronNowHandler,
  cronStatusHandler,
  testNotificationHandler,
} from "./handlers/callbacks/cron-actions.js";

export function createBot(token: string, scheduler?: any) {
  const bot = new TelegramBot<MyContext>(token);

  // –î–æ–±–∞–≤–ª—è–µ–º scheduler –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
  if (scheduler) {
    bot.use((ctx, next) => {
      (ctx as any).scheduler = scheduler;
      return next();
    });
  }

  // –°–æ–∑–¥–∞–µ–º storage –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è Supabase
  const storage = createSupabaseStorageAdapter("grammy_sessions");

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Å—Å–∏–∏ —Å Supabase storage
  const sessionConfig = {
    initial: (): SessionData => ({
      isAdmin: true,
    }),
    storage,
  };

  bot.use(session(sessionConfig));

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ conversations
  bot.use(conversations());

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º conversations
  bot.use(createConversation(newsSelectionConversation, "news-selection"));
  bot.use(createConversation(editTitleConversation, "edit-title"));
  bot.use(createConversation(editTextConversation, "edit-text"));
  bot.use(createConversation(editHashtagsConversation, "edit-hashtags"));
  bot.use(createConversation(addChannelConversation, "add-channel"));
  bot.use(createConversation(selectChannelConversation, "select-channel"));

  // API Middlewares
  bot.api.config.use(
    autoRetry({
      maxRetryAttempts: 1,
      maxDelaySeconds: 5,
    })
  );
  bot.on("message", (ctx, next) => {
    logger.info({
      msg: "message received",
      message: ctx.message,
    });
    return next();
  });

  // Logging middleware for development
  if (config.isDev) {
    bot.use((ctx, next) => {
      logger.info({
        msg: "update received",
        update_id: ctx.update.update_id,
      });
      return next();
    });
  }

  // Channel selection callbacks
  bot.callbackQuery(/^select_channel_(.+)$/, handleChannelSelection);

  bot.command("select_channel", selectChannelCommand);
  bot.command("add_channel", addChannelCommand);

  // Channel management callbacks
  bot.callbackQuery("add_new_channel", async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("add-channel");
  });

  // Admin commands
  bot.command("get_posts", getPostsCommand);
  bot.command("view_posts", viewPostsCommand);

  // State management commands
  bot.command("clear_state", clearStateCommand);
  bot.command("status", statusCommand);

  // Cron management commands
  bot.command("cron_test", cronTestCommand);

  // Callback handlers –¥–ª—è –∫–Ω–æ–ø–æ–∫
  bot.callbackQuery("select_post_for_processing", async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("news-selection");
  });

  bot.callbackQuery("regenerate_title", regenerateTitleHandler);
  bot.callbackQuery("regenerate_description", regenerateDescriptionHandler);
  bot.callbackQuery("publish_post", publishPostHandler);
  bot.callbackQuery("cancel_post", cancelPostHandler);
  bot.callbackQuery("edit_hashtags", editHashtagsHandler);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  bot.callbackQuery("edit_title", async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("edit-title");
  });

  bot.callbackQuery("edit_text", async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("edit-text");
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
  bot.callbackQuery("retry_news_processing", async (ctx) => {
    await ctx.answerCallbackQuery("üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–Ω–æ–≤–æ...");

    // –û—á–∏—â–∞–µ–º pendingNewsRequest –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    if (ctx.session.pendingNewsRequest) {
      delete ctx.session.pendingNewsRequest;
      logger.info({
        msg: "Cleared pendingNewsRequest before retry",
        userId: ctx.from?.id,
      });
    }

    await getPostsCommand(ctx);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏
  bot.callbackQuery("cancel_news_processing", async (ctx) => {
    await ctx.answerCallbackQuery("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");

    // –û—á–∏—â–∞–µ–º pendingNewsRequest –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    if (ctx.session.pendingNewsRequest) {
      delete ctx.session.pendingNewsRequest;
      logger.info({
        msg: "Cleared pendingNewsRequest after user cancellation",
        userId: ctx.from?.id,
      });
    }

    await ctx.editMessageText(
      "‚ùå **–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
      {
        parse_mode: "Markdown",
      }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
  bot.callbackQuery("retry_single_news_processing", async (ctx) => {
    await ctx.answerCallbackQuery("üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ—Å—Ç–∏...");
    await ctx.conversation.enter("news-selection");
  });

  // Cron management callbacks
  bot.callbackQuery("run_cron_now", runCronNowHandler);
  bot.callbackQuery("cron_status", cronStatusHandler);
  bot.callbackQuery("test_notification", testNotificationHandler);

  bot.callbackQuery("select_another_channel", async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("select-channel");
  });

  bot.callbackQuery("my_channels", async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("select-channel");
  });

  bot.callbackQuery("refresh_channels", async (ctx) => {
    await ctx.answerCallbackQuery("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤...");
    await ctx.conversation.enter("select-channel");
  });

  bot.callbackQuery("cancel_channel_selection", async (ctx) => {
    // await ctx.answerCallbackQuery("‚ùå –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω");
    await ctx.editMessageText(
      "‚ùå **–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /select_channel –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–∑–∂–µ.",
      {
        parse_mode: "Markdown",
      }
    );
  });

  bot.callbackQuery("main_menu", async (ctx) => {
    await ctx.answerCallbackQuery("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
    await ctx.editMessageText(
      "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n" +
        "üì∫ /add_channel - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª\n" +
        "üìã /select_channel - –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª\n" +
        "üì∞ /get_posts - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n" +
        "üëÄ /view_posts - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã\n" +
        "‚öôÔ∏è /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
      { parse_mode: "HTML" }
    );
  });

  // Features
  bot.use(botAdminFeature);
  bot.use(welcomeFeature);

  // Error handler
  bot.catch((err) => {
    const { ctx } = err;
    logger.error({
      msg: "Bot error occurred",
      error: err.error,
      stack: err.error instanceof Error ? err.error.stack : undefined,
      update: ctx.update,
    });
  });

  return bot;
}

export type BotInstance = ReturnType<typeof createBot>;
