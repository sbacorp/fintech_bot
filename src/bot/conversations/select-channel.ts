import { Context } from "grammy";
import { InlineKeyboard } from "grammy";
import { MyConversation } from "../../types/context.js";
import { logger } from "../../utils/logger.js";
import { supabaseService, Channel } from "../../services/supabase-service.js";

/**
 * Conversation –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function selectChannelConversation(
  conversation: MyConversation,
  ctx: Context
) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userChannels = await getUserChannels(userId);
    logger.info({
      msg: 'User channels retrieved',
      userId,
      channelsCount: userChannels?.length || 0
    });

    if (!userChannels || userChannels.length === 0) {
      await ctx.reply(
        "üì∫ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤</b>\n\n" +
        "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n" +
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_channel –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞",
        { parse_mode: "HTML" }
      );
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    await displayChannelsList(ctx, userChannels);

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
    const channelsKeyboard = createChannelsKeyboard(userChannels);

    await ctx.reply(
      "üì∫ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:**\n\n" +
      "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:",
      { 
        parse_mode: "Markdown",
        reply_markup: channelsKeyboard
      }
    );
    return;

  } catch (error) {
    logger.error({
      msg: 'Error in select channel conversation',
      error: error instanceof Error ? error.message : String(error)
    });
    await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function getUserChannels(userId: number): Promise<Channel[] | null> {
  const channels = await supabaseService.getUserChannels(userId);
  return channels;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function displayChannelsList(ctx: Context, channels: Channel[]): Promise<void> {
  let channelsList = "üì∫ **–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:**\n\n";

  channels.forEach((channel, index) => {
    channelsList += `**${index + 1}.** ${channel.name}\n`;
    
    if (channel.description) {
      const shortDesc = channel.description.length > 100 
        ? channel.description.substring(0, 100) + "..."
        : channel.description;
      channelsList += `   üìù ${shortDesc}\n`;
    }
    
    if (channel.channel_username) {
      channelsList += `   üîó ${channel.channel_username}\n`;
    }
    
    channelsList += `   üîê –ê–¥–º–∏–Ω: ${channel.is_admin_verified ? '‚úÖ' : '‚ö†Ô∏è'}\n`;
    channelsList += `   üìä –°—Ç–∞—Ç—É—Å: ${channel.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n`;
  });

  await ctx.reply(channelsList, { parse_mode: "Markdown" });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
 */
function createChannelsKeyboard(channels: Channel[]): InlineKeyboard {
  const keyboard = new InlineKeyboard();

  channels.forEach((channel, index) => {
    const buttonText = `${index + 1}. ${channel.name}`;
    const callbackData = `select_channel_${channel.id}`;
    
    keyboard.text(buttonText, callbackData).row();
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  keyboard
    .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "add_new_channel")
    .row()
    .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_channel_selection");

  return keyboard;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ
 */
async function displaySelectedChannel(ctx: Context, channel: Channel): Promise<void> {
  let channelInfo = "‚úÖ **–ö–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω!**\n\n";
  
  channelInfo += `üì∫ **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${channel.name}\n`;
  
  if (channel.description) {
    channelInfo += `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${channel.description}\n`;
  }
  
  if (channel.channel_username) {
    channelInfo += `üîó **Username:** ${channel.channel_username}\n`;
  }
  
  if (channel.channel_id) {
    channelInfo += `üÜî **ID –∫–∞–Ω–∞–ª–∞:** ${channel.channel_id}\n`;
  }
  
  if (channel.sources && channel.sources.length > 0) {
    channelInfo += `üì∞ **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** ${channel.sources.length} —à—Ç.\n`;
  }
  
  if (channel.ai_prompt) {
    channelInfo += `ü§ñ **–ü—Ä–æ–º–ø—Ç –ò–ò:** –ù–∞—Å—Ç—Ä–æ–µ–Ω\n`;
  }
  
  channelInfo += `üîê **–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞:** ${channel.is_admin_verified ? '‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã' : '‚ö†Ô∏è –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã'}\n`;
  channelInfo += `üìä **–°—Ç–∞—Ç—É—Å:** ${channel.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n`;
  
  channelInfo += "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º!";

  const keyboard = new InlineKeyboard()
    .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu");

  await ctx.reply(channelInfo, { 
    parse_mode: "Markdown",
    reply_markup: keyboard
  });
}

/**
 * Conversation –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
 */
export async function manageChannelsConversation(
  conversation: MyConversation,
  ctx: Context
) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userChannels = await getUserChannels(userId);

    if (!userChannels || userChannels.length === 0) {
      await ctx.reply(
        "üì∫ **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤**\n\n" +
        "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏!",
        { parse_mode: "Markdown" }
      );
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await displayChannelsList(ctx, userChannels);

    const manageKeyboard = new InlineKeyboard()
      .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "add_new_channel")
      .row()
      .text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª", "edit_channel")
      .row()
      .text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", "delete_channel")
      .row()
      .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu");

    await ctx.reply(
      "‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏**\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      { 
        parse_mode: "Markdown",
        reply_markup: manageKeyboard
      }
    );

  } catch (error) {
    logger.error({
      msg: 'Error in manage channels conversation',
      error: error instanceof Error ? error.message : String(error)
    });
    await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
  }
}
