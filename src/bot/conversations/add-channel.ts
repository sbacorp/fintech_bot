import { Context } from "grammy";
import { InlineKeyboard } from "grammy";
import { MyConversation } from "../../types/context.js";
import { logger } from "../../utils/logger.js";
import { supabaseService, Channel } from "../../services/supabase-service.js";

/**
 * Conversation –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
 */
export async function addChannelConversation(
  conversation: MyConversation,
  ctx: Context
) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    await ctx.reply(
      "üì∫ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞**\n\n" +
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π!\n\n" +
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:",
      { parse_mode: "Markdown" }
    );
    // –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    const name = await getChannelName(conversation, ctx);
    if (!name) return;

    // –®–∞–≥ 2: –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    const description = await getChannelDescription(conversation, ctx);

    // –®–∞–≥ 3: Username –∫–∞–Ω–∞–ª–∞
    const channelUsername = await getChannelUsername(conversation, ctx);
    if (!channelUsername) return;

    // –®–∞–≥ 4: ID –∫–∞–Ω–∞–ª–∞
    const channelId = await getChannelId(conversation, ctx);
    if (!channelId) return;

    // –®–∞–≥ 5: –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    const sources = await getNewsSources(conversation, ctx);
    if (!sources) return;

    // –®–∞–≥ 6: –ü—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
    const aiPrompt = await getAiPrompt(conversation, ctx);
    if (!aiPrompt) return;

    // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    const isAdminVerified = await checkAdminRights(
      conversation,
      ctx,
      channelUsername
    );
    if (isAdminVerified === null) return;

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞
    const channelData: Omit<Channel, "id" | "created_at" | "updated_at"> = {
      user_id: userId,
      name,
      description: description || undefined,
      sources,
      channel_username: channelUsername,
      channel_id: channelId,
      is_admin_verified: isAdminVerified,
      ai_prompt: aiPrompt,
      is_active: true,
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const savedChannel = await saveChannelToDatabase(channelData);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await displayChannelSummary(ctx, savedChannel);

    logger.info({
      msg: "Channel added successfully",
      userId,
      channelName: name,
      channelId: channelData.channel_id,
    });
  } catch (error) {
    logger.error({
      msg: "Error in add channel conversation",
      error: error instanceof Error ? error.message : String(error),
    });
    await ctx.reply(
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${
        error instanceof Error ? error.message : String(error)
      }`
    );
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function saveChannelToDatabase(
  channelData: Omit<Channel, "id" | "created_at" | "updated_at">
): Promise<Channel> {
  const savedChannel = await supabaseService.saveChannel(channelData);

  if (!savedChannel) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");
  }

  return savedChannel;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
 */
async function displayChannelSummary(
  ctx: Context,
  channel: Channel
): Promise<void> {
  let summary = "‚úÖ **–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n";

  summary += `üì∫ **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${channel.name}\n`;

  if (channel.description) {
    summary += `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${channel.description}\n`;
  }

  if (channel.channel_username) {
    summary += `üîó **Username:** @${channel.channel_username}\n`;
  }

  if (channel.channel_id) {
    summary += `üÜî **ID –∫–∞–Ω–∞–ª–∞:** ${channel.channel_id}\n`;
  }

  if (channel.sources.length > 0) {
    summary += `üì∞ **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** ${channel.sources.length} —à—Ç.\n`;
  }

  if (channel.ai_prompt) {
    summary += `ü§ñ **–ü—Ä–æ–º–ø—Ç –ò–ò:** –ù–∞—Å—Ç—Ä–æ–µ–Ω\n`;
  }

  summary += `üîê **–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞:** ${
    channel.is_admin_verified ? "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã" : "‚ö†Ô∏è –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
  }\n`;
  summary += `üìä **–°—Ç–∞—Ç—É—Å:** ${
    channel.is_active ? "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" : "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
  }\n\n`;

  summary +=
    "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π!";

  const keyboard = new InlineKeyboard()
    .text("üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã", "my_channels")
    .row()
    .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu");

  await ctx.reply(summary, {
    parse_mode: "Markdown",
    reply_markup: keyboard,
  });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
 */
async function getChannelName(
  conversation: MyConversation,
  ctx: Context
): Promise<string | null> {
  const maxRetries = 3;
  let attempts = 0;

  while (attempts < maxRetries) {
    try {
      const { message } = await conversation.waitFor("message:text");
      const name = message.text.trim();

      if (name && name.length >= 2) {
        return name;
      }

      attempts++;
      if (attempts < maxRetries) {
        await ctx.reply(
          `‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n` +
            `–ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1} –∏–∑ ${maxRetries}:\n\n` +
            `‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:`
        );
      }
    } catch (error) {
      if (error instanceof Error && error.message.includes("conversation")) {
        return null; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
      }
      attempts++;
    }
  }

  await ctx.reply(
    "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
  );
  return null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
 */
async function getChannelDescription(
  conversation: MyConversation,
  ctx: Context
): Promise<string | null> {
  const maxRetries = 3;
  let attempts = 0;

  while (attempts < maxRetries) {
    try {
      await ctx.reply(
        "üìù **–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞**\n\n" +
          "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ –µ–≥–æ —Ç–µ–º–∞—Ç–∏–∫–∏:\n" +
          "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–æ–≤–æ—Å—Ç–∏ –æ —Ñ–∏–Ω—Ç–µ—Ö–µ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö'\n" +
          "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        { parse_mode: "Markdown" }
      );

      const { message } = await conversation.waitFor("message:text");
      const description = message.text.trim();

      if (description && description.length >= 10) {
        return description;
      }

      attempts++;
      if (attempts < maxRetries) {
        await ctx.reply(
          `‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n` +
            `–ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1} –∏–∑ ${maxRetries}:\n\n` +
            `üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:`
        );
      }
    } catch (error) {
      if (error instanceof Error && error.message.includes("conversation")) {
        return null; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
      }
      attempts++;
    }
  }

  await ctx.reply(
    "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
  );
  return null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç username –∫–∞–Ω–∞–ª–∞ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
 */
async function getChannelUsername(
  conversation: MyConversation,
  ctx: Context
): Promise<string | undefined | null> {
  const maxRetries = 3;
  let attempts = 0;

  while (attempts < maxRetries) {
    try {
      await ctx.reply(
        "üîó *Username –∫–∞–Ω–∞–ª–∞*\n\n" +
          "–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychannel):\n" +
          "üí° –ï—Å–ª–∏ —É –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç username, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'\n" +
          "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        { parse_mode: "Markdown" }
      );

      const { message } = await conversation.waitFor("message:text");
      let username = message.text.trim().toLowerCase();

      if (username === "–Ω–µ—Ç" || username === "no" || username === "") {
        return undefined;
      }
      console.log(username, "username");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç username
      if (username && /^@[a-zA-Z0-9_]{5,32}$/.test(username)) {
        return username;
      }

      attempts++;
      if (attempts < maxRetries) {
        await ctx.reply(
          `‚ùå Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5-32 —Å–∏–º–≤–æ–ª–∞ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è).\n` +
            `–ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1} –∏–∑ ${maxRetries}:\n\n` +
            `üîó –í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ '–Ω–µ—Ç':`
        );
      }
    } catch (error) {
      if (error instanceof Error && error.message.includes("conversation")) {
        return null; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
      }
      attempts++;
    }
  }

  await ctx.reply(
    "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
  );
  return null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç ID –∫–∞–Ω–∞–ª–∞ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
 */
async function getChannelId(
  conversation: MyConversation,
  ctx: Context
): Promise<number | null> {
  const maxRetries = 3;
  let attempts = 0;

  while (attempts < maxRetries) {
    try {
      await ctx.reply(
        "üÜî **ID –∫–∞–Ω–∞–ª–∞**\n\n" +
          "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890):\n" +
          "üí° ID –∫–∞–Ω–∞–ª–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –ø–µ—Ä–µ—Å–ª–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É @userinfobot\n" +
          "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        { parse_mode: "Markdown" }
      );

      const { message } = await conversation.waitFor("message:text");
      const channelIdText = message.text.trim();
      const channelId = parseInt(channelIdText, 10);

      if (!isNaN(channelId) && channelId < 0 && channelIdText.length >= 10) {
        return channelId;
      }

      attempts++;
      if (attempts < maxRetries) {
        await ctx.reply(
          `‚ùå ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä).\n` +
            `–ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1} –∏–∑ ${maxRetries}:\n\n` +
            `üÜî –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:`
        );
      }
    } catch (error) {
      if (error instanceof Error && error.message.includes("conversation")) {
        return null; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
      }
      attempts++;
    }
  }

  await ctx.reply(
    "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
  );
  return null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ä–µ—Ç—Ä–∞—è–º–∏
 */
async function getNewsSources(
  conversation: MyConversation,
  ctx: Context
): Promise<string[] | null> {
  const maxRetries = 3;
  let attempts = 0;

  while (attempts < maxRetries) {
    try {
      await ctx.reply(
        "üì∞ **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π**\n\n" +
          "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n" +
          "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: https://example1.com, https://example2.com\n" +
          "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        { parse_mode: "Markdown" }
      );

      const { message } = await conversation.waitFor("message:text");
      const sourcesText = message.text.trim();
      const sources = sourcesText
        .split(",")
        .map((s) => s.trim())
        .filter((s) => s.length > 0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ - –≤–∞–ª–∏–¥–Ω—ã–µ URL
      const validSources = sources.filter((source) => {
        try {
          new URL(source);
          return true;
        } catch {
          return false;
        }
      });

      if (validSources.length >= 1) {
        return validSources;
      }

      attempts++;
      if (attempts < maxRetries) {
        await ctx.reply(
          `‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º—É–º 1 –≤–∞–ª–∏–¥–Ω—ã–π URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.\n` +
            `–ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1} –∏–∑ ${maxRetries}:\n\n` +
            `üì∞ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:`
        );
      }
    } catch (error) {
      if (error instanceof Error && error.message.includes("conversation")) {
        return null; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
      }
      attempts++;
    }
  }

  await ctx.reply(
    "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
  );
  return null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò —Å —Ä–µ—Ç—Ä–∞—è–º–∏
 */
async function getAiPrompt(
  conversation: MyConversation,
  ctx: Context
): Promise<string | null> {
  const maxRetries = 3;
  let attempts = 0;

  while (attempts < maxRetries) {
    try {
      await ctx.reply(
        "ü§ñ **–ü—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò**\n\n" +
          "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –ò–ò:\n" +
          "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: '–°–æ–∑–¥–∞–≤–∞–π –ø–æ—Å—Ç—ã –≤ —Å—Ç–∏–ª–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ —Ñ–∏–Ω—Ç–µ—Ö–µ'\n" +
          "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        { parse_mode: "Markdown" }
      );

      const { message } = await conversation.waitFor("message:text");
      const aiPrompt = message.text.trim();

      if (aiPrompt && aiPrompt.length >= 20) {
        return aiPrompt;
      }

      attempts++;
      if (attempts < maxRetries) {
        await ctx.reply(
          `‚ùå –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤.\n` +
            `–ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1} –∏–∑ ${maxRetries}:\n\n` +
            `ü§ñ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò:`
        );
      }
    } catch (error) {
      if (error instanceof Error && error.message.includes("conversation")) {
        return null; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
      }
      attempts++;
    }
  }

  await ctx.reply(
    "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
  );
  return null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
 */
async function checkAdminRights(
  conversation: MyConversation,
  ctx: Context,
  channelUsername: string
): Promise<boolean | null> {
  const checkAdminKeyboard = new InlineKeyboard().text(
    "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞",
    "check_admin_rights"
  );
  const me = await ctx.api.getMe();

  logger.info({
    msg: "Starting admin rights check",
    channelUsername,
    botId: me.id,
  });

  await ctx.reply(
    "üîê **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞**\n\n" +
      "–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ.\n" +
      "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n" +
      "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
    { parse_mode: "Markdown", reply_markup: checkAdminKeyboard }
  );

  try {
    // –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    await conversation.waitForCallbackQuery("check_admin_rights", {
      otherwise: (ctx) =>
        ctx.reply("–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", {
          reply_markup: checkAdminKeyboard,
        }),
    });
    // –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const chatIdentifier = channelUsername.startsWith("@")
      ? channelUsername
      : `@${channelUsername}`;
    const chatMember = await ctx.api.getChatMember(chatIdentifier, me.id);
    if (chatMember.status === "administrator") {
      await ctx.reply("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!", {
        parse_mode: "Markdown",
      });
      return true;
    }

    logger.info({
      msg: "callbackQuery",
    });
  } catch (error) {
    if (error instanceof Error && error.message.includes("conversation")) {
      return null; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.error({
      msg: "Error checking admin rights",
      error: error instanceof Error ? error.message : String(error),
      channelUsername,
      chatIdentifier: channelUsername.startsWith("@")
        ? channelUsername
        : `@${channelUsername}`,
    });
  }

  return false;
}
