import { Context } from "grammy";
import { MyConversation } from "../../types/context.js";
import { logger } from "../../utils/logger.js";
import { InlineKeyboard } from "grammy";
import { getUserProcessedPost, setUserProcessedPost } from "../../services/webhook.js";
import { displayPost } from "../../utils/post-display.js";

/**
 * Conversation –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å—Ç–∞
 */
export async function editTitleConversation(
  conversation: MyConversation,
  ctx: Context
) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç
    const processedPost = await getUserProcessedPost(userId);
    
    if (!processedPost) {
      await ctx.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await ctx.reply(
      `‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞**\n\n` +
      `üì∞ **–¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:**\n${processedPost.generated_title || processedPost.original_title}\n\n` +
      `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:`,
      { parse_mode: "Markdown" }
    );

    // –ñ–¥–µ–º –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const { message } = await conversation.waitFor("message:text");
    const newTitle = message.text.trim();

    if (!newTitle) {
      await ctx.reply("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    processedPost.generated_title = newTitle;
    await setUserProcessedPost(userId, processedPost);

    logger.info({
      msg: 'Title manually edited',
      userId,
      newTitle: newTitle.substring(0, 100)
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
    await displayUpdatedPost(ctx, processedPost, "–∑–∞–≥–æ–ª–æ–≤–æ–∫");

  } catch (error) {
    logger.error({
      msg: 'Error in edit title conversation',
      error: error instanceof Error ? error.message : String(error)
    });
    await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Conversation –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
 */
export async function editTextConversation(
  conversation: MyConversation,
  ctx: Context
) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç
    const processedPost = await getUserProcessedPost(userId);
    
    if (!processedPost) {
      await ctx.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
    await ctx.reply(
      `üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞**\n\n` +
      `üìÑ **–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n${processedPost.generated_post_text}\n\n` +
      `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:`,
      { parse_mode: "Markdown" }
    );

    // –ñ–¥–µ–º –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const { message } = await conversation.waitFor("message:text");
    const newText = message.text.trim();

    if (!newText) {
      await ctx.reply("‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    processedPost.generated_post_text = newText;
    await setUserProcessedPost(userId, processedPost);

    logger.info({
      msg: 'Text manually edited',
      userId,
      newText: newText.substring(0, 100) + '...'
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
    await displayUpdatedPost(ctx, processedPost, "—Ç–µ–∫—Å—Ç");

  } catch (error) {
    logger.error({
      msg: 'Error in edit text conversation',
      error: error instanceof Error ? error.message : String(error)
    });
    await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Conversation –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤ –ø–æ—Å—Ç–∞
 */
export async function editHashtagsConversation(
  conversation: MyConversation,
  ctx: Context
) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç
    const processedPost = await getUserProcessedPost(userId);
    
    if (!processedPost) {
      await ctx.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ö—ç—à—Ç–µ–≥–∏
    const currentHashtags = processedPost.hashtags && processedPost.hashtags.length > 0 
      ? processedPost.hashtags.split(' ').join(', ')
      : '–Ω–µ—Ç —Ö—ç—à—Ç–µ–≥–æ–≤';

    await ctx.reply(
      `üè∑Ô∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤**\n\n` +
      `üìù **–¢–µ–∫—É—â–∏–µ —Ö—ç—à—Ç–µ–≥–∏:** ${currentHashtags}\n\n` +
      `‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ö—ç—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª\n` +
      `üí° –ü—Ä–∏–º–µ—Ä: #fintech #payments #crypto\n\n` +
      `‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel`,
      { parse_mode: "Markdown" }
    );

    // –ñ–¥–µ–º –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤
    const { message } = await conversation.waitFor("message:text");
    const newHashtagsText = message.text.trim();

    if (!newHashtagsText) {
      await ctx.reply("‚ùå –•—ç—à—Ç–µ–≥–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return;
    }

    // –ü–∞—Ä—Å–∏–º —Ö—ç—à—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const hashtags = parseHashtags(newHashtagsText);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ö—ç—à—Ç–µ–≥–∏
    processedPost.hashtags = hashtags.join()
    await setUserProcessedPost(userId, processedPost);

    logger.info({
      msg: 'Hashtags manually edited',
      userId,
      newHashtags: hashtags
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
    await displayUpdatedPost(ctx, processedPost, "—Ö—ç—à—Ç–µ–≥–∏");

  } catch (error) {
    logger.error({
      msg: 'Error in edit hashtags conversation',
      error: error instanceof Error ? error.message : String(error)
    });
    await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * –ü–∞—Ä—Å–∏—Ç —Ö—ç—à—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
function parseHashtags(text: string): string[] {
  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –ø—Ä–æ–±–µ–ª—É
  const hashtags = text
    .split(/[,\s]+/)
    .map(tag => tag.trim())
    .filter(tag => tag.length > 0)
    .map(tag => {
      // –î–æ–±–∞–≤–ª—è–µ–º # –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!tag.startsWith('#')) {
        return `#${tag}`;
      }
      return tag;
    })
    .filter((tag, index, array) => array.indexOf(tag) === index); // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

  return hashtags;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function displayUpdatedPost(ctx: Context, processedPost: any, editedPart: string) {
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  await ctx.reply(`‚úÖ **${editedPart.charAt(0).toUpperCase() + editedPart.slice(1)} –æ–±–Ω–æ–≤–ª–µ–Ω!**`);
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å—Ç —Å –ø–æ–º–æ—â—å—é –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
  await displayPost(ctx, processedPost);
}
