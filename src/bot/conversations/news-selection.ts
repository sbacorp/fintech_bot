import { Context } from "grammy";
import { InlineKeyboard } from "grammy";
import axios from "axios";
import { logger } from "../../utils/logger.js";
import { channelService } from "../../services/channel-service.js";
import { MyConversation } from "../../types/context.js";
import { getUserNews, setUserProcessedPost } from "../../services/webhook.js";
import { displayPost } from "../../utils/post-display.js";
import { N8N_WEBHOOK_PATHES } from "../../utils/n8n_pathes.js";

export interface ProcessedPost {
  main_post_image: string;
  original_title: string;
  generated_title: string;
  generated_post_text: string;
  hashtags: string;
  original_link: string;
  channelId: string;
  channelName: string;
}
/**
 * Conversation –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∞–¥–º–∏–Ω–æ–º
 */
export async function newsSelectionConversation(
  conversation: MyConversation,
  ctx: Context
) {
  try {
    const session = await conversation.external((ctx) => ctx.session);
    // –ü–æ–ª—É—á–∞–µ–º userId –Ω–∞–ø—Ä—è–º—É—é –∏–∑ conversation context
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ —Å–µ—Å—Å–∏–∏
    const selectedChannel = session.selectedChannel;
    if (!selectedChannel) {
      await ctx.reply("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–±–µ–∑ external)
    const selectedNews = (await getUserNews(userId, selectedChannel.id)) || [];

    if (!selectedNews || selectedNews.length === 0) {
      await ctx.reply(
        "‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_posts –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
      );
      return;
    }

    logger.info({
      msg: "Found news for processing in conversation",
      userId,
      newsCount: selectedNews.length,
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    await displayNewsList(ctx, selectedNews);

    // –ù–æ–≤–æ—Å—Ç–∏ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook
    const allNews = selectedNews;

    logger.debug({
      msg: "Extracted news for selection",
      totalNews: allNews.length,
      originalStructureLength: selectedNews.length,
    });

    // –ñ–¥–µ–º –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –ø–æ—Å—Ç–∞
    await ctx.reply("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:");

    const { message } = await conversation.waitFor("message:text");
    const postIndex = parseInt(message.text.trim(), 10) - 1;

    if (isNaN(postIndex) || postIndex < 0 || postIndex >= allNews.length) {
      await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å—Ç—ã –æ—Ç 1 –¥–æ ${allNews.length}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Å—Ç (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º external –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)

    const selectedPost = allNews[postIndex];

    logger.info({
      msg: "Post selected for processing",
      postIndex: postIndex + 1,
      title: selectedPost.title?.substring(0, 100) || "no title",
      category: selectedPost.category,
      urgency: selectedPost.urgency,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ n8n
    await ctx.reply("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç—å...");

    const processedPost = await processNewsWithN8n(
      selectedPost,
      selectedChannel,
      userId
    );

    if (!processedPost) {
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
      const retryKeyboard = new InlineKeyboard()
        .text("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "retry_single_news_processing")
        .row()
        .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_news_processing");

      // –û—á–∏—â–∞–µ–º pendingNewsRequest –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      if (session.pendingNewsRequest) {
        delete session.pendingNewsRequest;
        logger.info({
          msg: "Cleared pendingNewsRequest after processing error",
          userId,
        });
      }

      await ctx.reply(
        "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ n8n**\n\n" +
          "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
          "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å n8n\n" +
          "‚Ä¢ –û—à–∏–±–∫–∞ –≤ workflow\n" +
          "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\n" +
          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É.",
        {
          parse_mode: "Markdown",
          reply_markup: retryKeyboard,
        }
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await setUserProcessedPost(userId, processedPost);

    // –û—á–∏—â–∞–µ–º pendingNewsRequest –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (session.pendingNewsRequest) {
      delete session.pendingNewsRequest;
      logger.info({
        msg: "Cleared pendingNewsRequest after successful news processing",
        userId,
      });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await displayProcessedPost(ctx, processedPost);
  } catch (error) {
    logger.error({
      msg: "Error in news selection conversation",
      error: error instanceof Error ? error.message : String(error),
    });

    // –û—á–∏—â–∞–µ–º pendingNewsRequest –ø—Ä–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–µ
    try {
      const session = await conversation.external((ctx) => ctx.session);
      const userId = ctx.from?.id;

      if (session.pendingNewsRequest && userId) {
        delete session.pendingNewsRequest;
        logger.info({
          msg: "Cleared pendingNewsRequest after conversation error",
          userId,
        });
      }
    } catch (sessionError) {
      logger.warn({
        msg: "Failed to clear pendingNewsRequest in error handler",
        error:
          sessionError instanceof Error
            ? sessionError.message
            : String(sessionError),
      });
    }

    await ctx.reply(
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${
        error instanceof Error ? error.message : String(error)
      }`
    );
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
 */
async function displayNewsList(ctx: Context, news: any[]) {
  let newsListText = "üì∞ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n\n";

  logger.debug({
    msg: "Displaying news list",
    newsCount: news.length,
    sampleTitles: news
      .slice(0, 3)
      .map((item) => item.title?.substring(0, 50) || "no title"),
  });

  if (news.length === 0) {
    newsListText += "‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n";
  } else {
    news.forEach((item, index) => {
      const title = item.title || "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞";
      newsListText += `**${index + 1}.** ${title}\n`;

      if (item.summary) {
        const shortDesc =
          item.summary.length > 100
            ? item.summary.substring(0, 100) + "..."
            : item.summary;
        newsListText += `   ${shortDesc}\n`;
      }

      if (item.category) {
        newsListText += `   üìÇ ${item.category}`;
        if (item.urgency) {
          const urgencyIcon =
            item.urgency === "high"
              ? "üî•"
              : item.urgency === "medium"
              ? "‚ö°"
              : "üìã";
          newsListText += ` ${urgencyIcon}${item.urgency}`;
        }
        newsListText += "\n";
      }

      newsListText += "\n";
    });
  }

  await ctx.reply(newsListText, { parse_mode: "Markdown" });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ n8n
 */
async function processNewsWithN8n(
  post: any,
  selectedChannel?: any,
  userId?: number,
  retryCount: number = 0
) {
  const maxRetries = 0; // –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π
    let channel = selectedChannel;
    if (!channel) {
      // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      channel = channelService.getDefaultChannel();
    }

    if (!channel) {
      logger.error({
        msg: "No channel available for news processing",
        postTitle: post.title,
      });
      return null;
    }

    const createUrl = N8N_WEBHOOK_PATHES.CREATE
    if (!createUrl) {
      logger.error({
        msg: "Create URL not configured for channel",
        channelId: channel.id,
        channelName: channel.name,
        postTitle: post.title,
      });
      return null;
    }

    logger.info({
      msg: "Processing news with n8n",
      channelId: channel.id,
      channelName: channel.name,
      createUrl: createUrl,
      postTitle: post.title,
    });

    const requestData = {
      // –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
      title: post.title,
      description: post.summary || post.description,
      link: post.url || post.link,

      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
      channelId: channel.id,
      channelName: channel.name,
      channelDescription: channel.description,

      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      userId: userId,

      // AI –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
      aiPrompt: channelService.getAiPrompt(channel),
    };

    const response = await axios.post(createUrl, requestData, {
      headers: {
        "Content-Type": "application/json",
      },
      timeout: 120000, // 120 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    logger.info({
      msg: "News processed by n8n",
      channelId: channel.id,
      channelName: channel.name,
      status: response.status,
      statusText: response.statusText,
      data: response.data,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if (!response.data) {
      logger.error({
        msg: "Empty response from n8n",
        channelId: channel.id,
        channelName: channel.name,
        postTitle: post.title,
        status: response.status,
      });
      throw new Error("Empty response from n8n");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –ø–æ—Å—Ç—É
    const processedPost = response.data as ProcessedPost;
    if (processedPost) {
      processedPost.original_link = post.url || post.link;
      processedPost.channelId = channel.id;
      processedPost.channelName = channel.name;
    }

    logger.info({
      msg: "Successfully processed news",
      channelId: channel.id,
      channelName: channel.name,
      postTitle: post.title,
      hasProcessedPost: !!processedPost,
    });

    return processedPost;
  } catch (error) {
    logger.error({
      msg: "Failed to process news with n8n",
      channelId: selectedChannel?.id,
      channelName: selectedChannel?.name,
      postTitle: post.title,
      retryCount,
      error: error instanceof Error ? error.message : String(error),
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
    if (retryCount < maxRetries) {
      logger.info({
        msg: "Retrying news processing",
        channelId: selectedChannel?.id,
        channelName: selectedChannel?.name,
        postTitle: post.title,
        retryCount: retryCount + 1,
        maxRetries,
      });

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise((resolve) => setTimeout(resolve, 2000));

      return processNewsWithN8n(post, selectedChannel, userId, retryCount + 1);
    }

    return null;
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
 */
async function displayProcessedPost(ctx: Context, processedPost: ProcessedPost) {
  await displayPost(ctx, processedPost);

  // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
  if (processedPost.main_post_image) {
    try {
      await ctx.replyWithPhoto(processedPost.main_post_image, {
        caption: "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞",
      });
    } catch (error) {
      logger.error({
        msg: "Failed to send post image",
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
}
