import { logger } from "../../../utils/logger.js";
import { MyContext } from "../../../types/context.js";
import { channelService } from "../../../services/channel-service.js";
import axios from "axios";
import { N8N_WEBHOOK_PATHES } from "../../../utils/n8n_pathes.js";

export async function getPostsCommand(ctx: MyContext) {
  const userId = ctx.from?.id;

  if(!userId) {
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
    const selectedChannel = ctx.session.selectedChannel;
    if (!selectedChannel) {
      await ctx.reply('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /select_channel –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if (ctx.session.pendingNewsRequest?.status === 'pending' || ctx.session.pendingNewsRequest?.status === 'processing') {
      await ctx.reply('‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
      return;
    }


    // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π n8n –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    const n8nSearchUrl = N8N_WEBHOOK_PATHES.SEARCH

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const loadingMessage = await ctx.reply(
      `üîç –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ **${selectedChannel.name}**...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —è —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.`
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.pendingNewsRequest = {
      requestId: `search_${userId}_${selectedChannel.id}`,
      userId,
      startTime: Date.now(),
      status: 'pending',
      messageId: loadingMessage.message_id
    };

    logger.info({
      msg: 'Starting news search for channel',
      userId,
      channelId: selectedChannel.id,
      channelName: selectedChannel.name,
      messageId: loadingMessage.message_id,
      searchUrl: n8nSearchUrl
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ URLs –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    const newsUrls = selectedChannel.sources;
    
    logger.info({
      msg: 'Using news URLs for search',
      channelId: selectedChannel.id,
      channelName: selectedChannel.name,
      newsUrlsCount: newsUrls.length,
      newsUrls: newsUrls
    });
    
    const searchResponse = await axios.post(n8nSearchUrl, {
      channelId: selectedChannel.id,
      channelName: selectedChannel.name,
      userId: userId,
      action: 'search_news',
      newsUrls: newsUrls
    }, {
      timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'FintechBot/1.0'
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    ctx.session.pendingNewsRequest.status = 'processing';

    logger.info({
      msg: 'N8N search flow triggered successfully for channel',
      userId,
      channelId: selectedChannel.id,
      channelName: selectedChannel.name,
      searchStatus: searchResponse.status,
      searchData: searchResponse.data,
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω
    await ctx.api.editMessageText(
      userId,
      loadingMessage.message_id,
      `üîç **–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${selectedChannel.name}!**\n\n‚è≥ N8N –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ\n\n‚è±Ô∏è –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-3 –º–∏–Ω—É—Ç—ã`,
      { parse_mode: "Markdown" }
    );

  } catch (error) {
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (ctx.session.pendingNewsRequest) {
      delete ctx.session.pendingNewsRequest;
    }

    logger.error({
      msg: 'get_posts command error',
      userId,
      channelId: ctx.session.selectedChannel?.id,
      error: error instanceof Error ? error.message : String(error),
    });

    await ctx.reply(
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:\n${error instanceof Error ? error.message : String(error)}`
    );
  }
}



/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendMessagesToUser(ctx: MyContext, messages: any[]) {
  for (const [index, message] of messages.entries()) {
    try {
      await ctx.reply(message.telegramMessage, {
        parse_mode: 'HTML',
        link_preview_options: {
          is_disabled: false,
        }
      });

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      if (index < messages.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

    } catch (error) {
      logger.error({
        msg: 'failed to send message to user',
        userId: ctx.from?.id,
        messageNumber: message.messageNumber,
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
}
