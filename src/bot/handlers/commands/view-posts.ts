import { logger } from "../../../utils/logger.js";
import { MyContext } from "../../../types/context.js";
import { InlineKeyboard } from "grammy";
import { getUserNews } from "../../../services/webhook.js";

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–∂–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
 */
export async function viewPostsCommand(ctx: MyContext) {
  const userId = ctx.from?.id;

  if (!userId) {
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
    const selectedChannel = ctx.session.selectedChannel;
    if (!selectedChannel) {
      await ctx.reply('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /select_channel –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞.');
      return;
    }

    logger.info({
      msg: 'Viewing posts for user',
      userId,
      channelId: selectedChannel.id,
      channelName: selectedChannel.name
    });

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const savedNews = await getUserNews(userId, selectedChannel.id);

    if (!savedNews || savedNews.length === 0) {
      await ctx.reply(
        "üì≠ **–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π**\n\n" +
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/get_posts` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.",
        { parse_mode: "Markdown" }
      );
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö
    const newsCount = savedNews.length;
    let infoMessage = `üì∞ **–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: ${newsCount}**\n\n`;
    infoMessage += `üì¢ **–ö–∞–Ω–∞–ª:** ${selectedChannel.name}\n\n`;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
    savedNews.forEach((item, index) => {
      const title = item.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';
      infoMessage += `**${index + 1}.** ${title}\n`;
      
      if (item.summary) {
        const shortDesc = item.summary.length > 100 
          ? item.summary.substring(0, 100) + "..." 
          : item.summary;
        infoMessage += `   ${shortDesc}\n`;
      }
      
      if (item.category) {
        infoMessage += `   üìÇ ${item.category}`;
        if (item.urgency) {
          const urgencyIcon = item.urgency === 'high' ? 'üî•' : item.urgency === 'medium' ? '‚ö°' : 'üìã';
          infoMessage += ` ${urgencyIcon}${item.urgency}`;
        }
        infoMessage += "\n";
      }
      
      infoMessage += "\n";
    });

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞
    const keyboard = new InlineKeyboard()
      .text("üìù –í—ã–±—Ä–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", "select_post_for_processing")
      .row()
      .text("üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", "retry_news_processing")
      .row()

    infoMessage += "üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n";
    infoMessage += "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n";
    infoMessage += "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏";

    await ctx.reply(infoMessage, {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });

    logger.info({
      msg: 'Posts displayed successfully',
      userId,
      channelId: selectedChannel.id,
      newsCount
    });

  } catch (error) {
    logger.error({
      msg: 'Error viewing posts',
      userId,
      error: error instanceof Error ? error.message : String(error)
    });

    await ctx.reply(
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π:\n${error instanceof Error ? error.message : String(error)}`
    );
  }
}
