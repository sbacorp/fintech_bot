import { logger } from "../../../utils/logger.js";
import { MyContext } from "../../../types/context.js";
import { config } from "../../../config/index.js";

export async function cronTestCommand(ctx: MyContext) {
  const userId = ctx.from?.id;

  if (!userId) {
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä–æ–º
    const isAdmin = config.BOT_ADMIN_USER_IDS.includes(userId);
    const isMainCreator = config.MAIN_CONTENT_CREATOR_ID === userId;

    if (!isAdmin && !isMainCreator) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ scheduler –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const scheduler = (ctx as any).scheduler;
    
    if (!scheduler) {
      await ctx.reply('‚ùå Scheduler –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö
    const tasksInfo = scheduler.getTasksInfo();
    
    let message = `üïõ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö:**\n\n`;
    
    if (tasksInfo.length === 0) {
      message += `üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n\n`;
    } else {
      for (const task of tasksInfo) {
        message += `üìã **${task.name}**\n`;
        message += `üîÑ –°—Ç–∞—Ç—É—Å: ${task.running ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n`;
        message += `‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${task.nextRun || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n`;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    message += `‚öôÔ∏è **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**\n`;
    message += `üë§ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä: ${config.MAIN_CONTENT_CREATOR_ID || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n`;
    message += `üë• –ê–¥–º–∏–Ω—ã: ${config.BOT_ADMIN_USER_IDS.length > 0 ? config.BOT_ADMIN_USER_IDS.join(', ') : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}\n`;
    message += `üåç –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: Europe/Moscow\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const keyboard = {
      inline_keyboard: [
        [
          { text: "üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É —Å–µ–π—á–∞—Å", callback_data: "run_cron_now" },
          { text: "üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á", callback_data: "cron_status" }
        ],
        [
          { text: "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data: "test_notification" }
        ]
      ]
    };

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });

    logger.info({
      msg: 'Cron test command executed',
      userId,
      isAdmin,
      isMainCreator,
      tasksCount: tasksInfo.length
    });

  } catch (error) {
    logger.error({
      msg: 'cron_test command error',
      userId,
      error: error instanceof Error ? error.message : String(error),
    });

    await ctx.reply(
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö:\n${error instanceof Error ? error.message : String(error)}`
    );
  }
}
