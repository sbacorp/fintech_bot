import { MyContext } from "../../../types/context.js";
import { logger } from "../../../utils/logger.js";
import { selectChannelConversation } from "../../conversations/select-channel.js";
import { supabaseService } from "../../../services/supabase-service.js";
import { InlineKeyboard } from "grammy";

export async function selectChannelCommand(ctx: MyContext) {
  const userId = ctx.from?.id;

  if (!userId) {
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  try {
    logger.info({
      msg: 'Select channel command started',
      userId
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º conversation –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
    await ctx.conversation.enter("select-channel");

  } catch (error) {
    logger.error({
      msg: 'select_channel command error',
      userId,
      error: error instanceof Error ? error.message : String(error),
    });

    await ctx.reply(
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞:\n${error instanceof Error ? error.message : String(error)}`
    );
  }
}

export async function handleChannelSelection(ctx: MyContext) {
  const userId = ctx.from?.id;
  const callbackData = ctx.callbackQuery?.data;

  if (!userId || !callbackData) {
    await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    return;
  }

  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ callback data
    const channelId = callbackData.replace('select_channel_', '');
    const channel = await supabaseService.getChannelById(channelId);

    if (!channel || !channel.is_active) {
      await ctx.answerCallbackQuery('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (channel.user_id !== userId) {
      await ctx.answerCallbackQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.selectedChannel = channel;

    logger.info({
      msg: 'Channel selected by user',
      userId,
      channelId: channel.id,
      channelName: channel.name
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const channels = await supabaseService.getUserChannels(userId);
    const keyboard = new InlineKeyboard();

    channels.forEach(ch => {
      const isSelected = ch.id === channel.id;
      keyboard.text(
        `${isSelected ? '‚úÖ' : 'üì¢'} ${ch.name}`,
        `select_channel_${ch.id}`
      ).row();
    });

    keyboard
      .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "add_new_channel")
      .row()
      .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu");

    const message = `üéØ **–ö–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω!**\n\n` +
      `üì¢ **${channel.name}**\n` +
      `${channel.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n` +
      `–¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º.\n` +
      `–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.`;

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });

    await ctx.answerCallbackQuery(`‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: ${channel.name}`);

  } catch (error) {
    logger.error({
      msg: 'Channel selection callback error',
      userId,
      callbackData,
      error: error instanceof Error ? error.message : String(error),
    });

    await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞');
  }
}

