import { MyContext } from "../../../types/context.js";
import { InlineKeyboard } from "grammy";
import { channelService } from "../../../services/channel-service.js";
import { logger } from "../../../utils/logger.js";
import { Channel } from "../../../config/index.js";

export async function selectChannelCommand(ctx: MyContext) {
  const userId = ctx.from?.id;

  if (!userId) {
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  try {
    const channels = channelService.getAllChannels();

    if (channels.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞');
      return;
    }

    if (channels.length === 1) {
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
      const channel = channels[0];
      ctx.session.selectedChannel = channel as Channel;

      await ctx.reply(
        `‚úÖ –ö–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n\n` +
        `üì¢ **${channel?.name}**\n` +
        `${channel?.description}\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º.`
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
    const keyboard = new InlineKeyboard();

    channels.forEach(channel => {
      keyboard.text(
        `üì¢ ${channel.name}`,
        `select_channel_${channel.id}`
      ).row();
    });

    const currentChannel = ctx.session.selectedChannel;
    const currentChannelText = currentChannel
      ? `–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: **${currentChannel.name}**`
      : '–ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω';

    const message = `üéØ **–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏**\n\n` +
      `${currentChannelText}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å:\n\n` +
      channels.map((channel, index) =>
        `${index + 1}. **${channel.name}**\n   ${channel.description}`
      ).join('\n\n');

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });

  } catch (error) {
    logger.error({
      msg: 'select_channel command error',
      userId,
      error: error instanceof Error ? error.message : String(error),
    });

    await ctx.reply(
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞:\n${error instanceof Error ? error.message : String(error)}`
    );
  }
}

export async function handleChannelSelection(ctx: MyContext) {
  const userId = ctx.from?.id;
  const callbackData = ctx.callbackQuery?.data;

  if (!userId || !callbackData) {
    await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    return;
  }

  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ callback data
    const channelId = callbackData.replace('select_channel_', '');
    const channel = channelService.getChannelById(channelId);

    if (!channel) {
      await ctx.answerCallbackQuery('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.selectedChannel = channel;

    logger.info({
      msg: 'Channel selected by user',
      userId,
      channelId: channel.id,
      channelName: channel.name
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const channels = channelService.getAllChannels();
    const keyboard = new InlineKeyboard();

    channels.forEach(ch => {
      const isSelected = ch.id === channel.id;
      keyboard.text(
        `${isSelected ? '‚úÖ' : 'üì¢'} ${ch.name}`,
        `select_channel_${ch.id}`
      ).row();
    });

    const message = `üéØ **–ö–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω!**\n\n` +
      `üì¢ **${channel.name}**\n` +
      `${channel.description}\n\n` +
      `–¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º.\n` +
      `–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.`;

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
    });

    await ctx.answerCallbackQuery(`‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: ${channel.name}`);

  } catch (error) {
    logger.error({
      msg: 'Channel selection callback error',
      userId,
      callbackData,
      error: error instanceof Error ? error.message : String(error),
    });

    await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞');
  }
}

