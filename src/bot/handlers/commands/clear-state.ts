import { MyContext } from "../../../types/context.js";
import { logger } from "../../../utils/logger.js";

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
 */
export async function clearStateCommand(ctx: MyContext) {
  const userId = ctx.from?.id;
  
  if (!userId) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    return;
  }

  try {
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session = {} as any;
    
    // –û—á–∏—â–∞–µ–º pendingNewsRequest –µ—Å–ª–∏ –µ—Å—Ç—å
    if (ctx.session.pendingNewsRequest) {
      delete ctx.session.pendingNewsRequest;
    }

    logger.info({
      msg: 'User state cleared',
      userId,
      command: 'clear_state'
    });

    await ctx.reply("‚úÖ *–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω–æ!*\n\n–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", { parse_mode: "Markdown" });
    
  } catch (error) {
    logger.error({
      msg: 'Error clearing user state',
      userId,
      error: error instanceof Error ? error.message : String(error)
    });
    
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
  }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export async function statusCommand(ctx: MyContext) {
  const userId = ctx.from?.id;
  
  if (!userId) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    return;
  }

  try {
    let statusMessage = "üìä **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞:**\n\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pendingNewsRequest
    if (ctx.session.pendingNewsRequest) {
      const request = ctx.session.pendingNewsRequest;
      statusMessage += `üîÑ **–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π:**\n`;
      statusMessage += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${request.status}\n`;
      statusMessage += `‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date(request.startTime).toLocaleString()}\n`;
      statusMessage += `‚Ä¢ ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${request.messageId}\n\n`;
    } else {
      statusMessage += `‚úÖ **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n`;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
    if (ctx.session.selectedChannel) {
      statusMessage += `üì¢ **–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª:**\n`;
      statusMessage += `‚Ä¢ Username: ${ctx.session.selectedChannel.channel_username}\n`;
      statusMessage += `‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${ctx.session.selectedChannel.name}\n\n`;
    } else {
      statusMessage += `‚ö†Ô∏è **–ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω**\n\n`;
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
    statusMessage += `üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n`;
    statusMessage += `‚Ä¢ /get_posts - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n`;
    statusMessage += `‚Ä¢ /view_posts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n`;
    statusMessage += `‚Ä¢ /select_channel - –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª\n`;
    statusMessage += `‚Ä¢ /clear_state - –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n`;
    statusMessage += `‚Ä¢ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n`;

    await ctx.reply(statusMessage, { parse_mode: "Markdown" });
    
  } catch (error) {
    logger.error({
      msg: 'Error getting status',
      userId,
      error: error instanceof Error ? error.message : String(error)
    });
    
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
  }
}
