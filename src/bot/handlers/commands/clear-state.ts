import { logger } from "../../../utils/logger.js";
import { MyContext } from "../../../types/context.js";
import { clearUserNews, clearUserProcessedPost, getUserNews, getUserProcessedPost } from "../../../services/webhook.js";

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è pending –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function clearStateCommand(ctx: MyContext) {
  const userId = ctx.from?.id;

  if (!userId) {
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  try {
    let stateCleared = false;
    let statusMessage = 'üßπ <b> –°—Ç–∞—Ç—É—Å –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: </b>\n\n';

    // –û—á–∏—â–∞–µ–º pending –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–µ—Å—Å–∏–∏
    if (ctx.session.pendingNewsRequest) {
      const pendingStatus = ctx.session.pendingNewsRequest.status;
      const startTime = ctx.session.pendingNewsRequest.startTime;
      const duration = Math.round((Date.now() - startTime) / 1000);
      
      delete ctx.session.pendingNewsRequest;
      stateCleared = true;
      
      statusMessage += `‚úÖ –£–¥–∞–ª–µ–Ω pending –∑–∞–ø—Ä–æ—Å\n`;
      statusMessage += `   Status: ${pendingStatus}\n`;
      statusMessage += `   Duration: ${duration}s\n\n`;
    } else {
      statusMessage += `‚ÑπÔ∏è Pending –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n`;
    }

    // –û—á–∏—â–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const selectedChannel = ctx.session.selectedChannel;
    const channelId = selectedChannel?.id;

    const newsCleared = await clearUserNews(userId, channelId);
    console.log('newsCleared', newsCleared);
    const processedPostCleared = await clearUserProcessedPost(userId);
    console.log('processedPostCleared', processedPostCleared);
    
    if (newsCleared) {
      statusMessage += `‚úÖ –û—á–∏—â–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n`;
      stateCleared = true;
    } else {
      statusMessage += `‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n`;
    }

    if (processedPostCleared) {
      statusMessage += `‚úÖ –û—á–∏—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ—Å—Ç\n\n`;
      stateCleared = true;
    } else {
      statusMessage += `–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n`;
    }

    if (stateCleared) {
      statusMessage += `<b> –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ! </b> \n –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /get_posts`;
    } else {
      statusMessage += `<b> –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —á–∏—Å—Ç—ã–º </b> \n –í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤`;
    }

    console.log('statusMessage', statusMessage);

    await ctx.reply(statusMessage, { parse_mode: "HTML" });

    logger.info({
      msg: 'State cleared by admin',
      userId,
      hadPendingRequest: !!ctx.session.pendingNewsRequest,
      hadSavedNews: newsCleared,
    });

  } catch (error) {
    logger.error({
      msg: 'Failed to clear state',
      userId,
      error: error instanceof Error ? error.message : String(error),
    });

    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:\n${error instanceof Error ? error.message : String(error)}`
    );
  }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export async function statusCommand(ctx: MyContext) {
  const userId = ctx.from?.id;

  if (!userId) {
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  try {
    let statusMessage = 'üìä **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**\n\n';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º pending –∑–∞–ø—Ä–æ—Å
    if (ctx.session.pendingNewsRequest) {
      const request = ctx.session.pendingNewsRequest;
      const duration = Math.round((Date.now() - request.startTime) / 1000);
      
      statusMessage += `üîÑ **–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å:**\n`;
      statusMessage += `   Status: ${request.status}\n`;
      statusMessage += `   Duration: ${duration}s\n`;
      statusMessage += `   Message ID: ${request.messageId || 'N/A'}\n\n`;
    } else {
      statusMessage += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç\n\n`;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    const savedNews = await getUserNews(userId);
    const processedPost = await getUserProcessedPost(userId);
    
    if (savedNews && savedNews.length > 0) {
      const totalNews = savedNews[0]?.news?.length || 0;
      statusMessage += `üì∞ **–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:**\n`;
      statusMessage += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${totalNews}\n`;
      statusMessage += `   –î–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞\n\n`;
    } else {
      statusMessage += `üì≠ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç\n\n`;
    }

    if (processedPost) {
      statusMessage += `üìù **–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:**\n`;
      statusMessage += `   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${processedPost.trigger_title?.substring(0, 50) || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}...\n`;
      statusMessage += `   –î–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n`;
    } else {
      statusMessage += `üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç\n\n`;
    }

    statusMessage += `üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n`;
    if (!ctx.session.pendingNewsRequest) {
      statusMessage += `‚Ä¢ /get_posts - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n`;
    }
    if (savedNews && savedNews.length > 0) {
      statusMessage += `‚Ä¢ /view_posts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n`;
      statusMessage += `‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –ø–æ—Å—Ç" - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n`;
    } else {
      statusMessage += `‚Ä¢ /view_posts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n`;
    }
    statusMessage += `‚Ä¢ /clear_state - –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n`;
    statusMessage += `‚Ä¢ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å`;

    await ctx.reply(statusMessage, { parse_mode: "Markdown" });

    logger.info({
      msg: 'Status checked by admin',
      userId,
      hasPendingRequest: !!ctx.session.pendingNewsRequest,
      hasSavedNews: !!(savedNews && savedNews.length > 0),
    });

  } catch (error) {
    logger.error({
      msg: 'Failed to check status',
      userId,
      error: error instanceof Error ? error.message : String(error),
    });

    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:\n${error instanceof Error ? error.message : String(error)}`
    );
  }
}
