import { InlineKeyboard } from "grammy";
import axios from "axios";
import { logger } from "../../../utils/logger.js";
import { MyContext } from "../../../types/context.js";
import { channelService } from "../../../services/channel-service.js";
import { 
  getUserProcessedPost, 
  setUserProcessedPost, 
  clearUserProcessedPost 
} from "../../../services/webhook.js";
import { updatePostMessage } from "../../../utils/post-display.js";

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
 */
export async function regenerateTitleHandler(ctx: MyContext) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }
    const processedPost = await getUserProcessedPost(userId);

    if (!processedPost) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
    const selectedChannel = ctx.session.selectedChannel;
    if (!selectedChannel) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞
    if (!channelService.supportsRegenerate(selectedChannel)) {
      await ctx.answerCallbackQuery("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤");
      return;
    }

    const regenerateUrl = channelService.getRegenerateUrl(selectedChannel);
    if (!regenerateUrl) {
      await ctx.answerCallbackQuery("‚ùå URL –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞");
      return;
    }

    await ctx.answerCallbackQuery("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–≥–æ–ª–æ–≤–æ–∫...");

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ—Ä–µ–∑ N8N —Ñ–ª–æ—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    const response = await axios.post(
      regenerateUrl,
      {
        action: 'regenerate_title',
        link: processedPost.original_link || '#',
        current_title: processedPost.trigger_title || processedPost.original_title,
        current_text: processedPost.post_text,
        channelId: selectedChannel.id,
        channelName: selectedChannel.name
      },
      {
        headers: { 'Content-Type': 'application/json' }
      }
    );
    console.log(response.data, 'N8N Response');
    
    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç N8N (format: {"output": "{\"new_title\": \"...\"}", "isValidJson": true})
    let parsedData = null;
    if (response.data && response.data.output) {
      try {
        parsedData = JSON.parse(response.data.output);
        console.log(parsedData, 'Parsed N8N Data');
      } catch (error) {
        console.error('Failed to parse N8N output:', error);
      }
    }
    
    if (parsedData && parsedData.new_title) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
      if (!processedPost._regeneration_count) {
        processedPost._regeneration_count = { title: 0, text: 0 };
      }
      processedPost._regeneration_count.title++;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      processedPost.trigger_title = parsedData.new_title;
      await setUserProcessedPost(userId, processedPost);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
      await updatePostMessageLocal(ctx, processedPost);
      
      logger.info({
        msg: 'Title regenerated successfully',
        new_title: parsedData.new_title,
        regeneration_count: processedPost._regeneration_count.title
      });
    } else {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫");
    }
    
  } catch (error) {
    logger.error({
      msg: 'Failed to regenerate title',
      error: error instanceof Error ? error.message : String(error)
    });
    
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
 */
export async function regenerateDescriptionHandler(ctx: MyContext) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    const processedPost = await getUserProcessedPost(userId);

    if (!processedPost) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
    const selectedChannel = ctx.session.selectedChannel;
    if (!selectedChannel) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞
    if (!channelService.supportsRegenerate(selectedChannel)) {
      await ctx.answerCallbackQuery("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤");
      return;
    }

    const regenerateUrl = channelService.getRegenerateUrl(selectedChannel);
    if (!regenerateUrl) {
      await ctx.answerCallbackQuery("‚ùå URL –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞");
      return;
    }

    await ctx.answerCallbackQuery("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ...");

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ N8N —Ñ–ª–æ—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    const response = await axios.post(
      regenerateUrl,
      {
        action: 'regenerate_text',
        link: processedPost.original_link || '#',
        current_title: processedPost.trigger_title || processedPost.original_title,
        current_text: processedPost.post_text,
        channelId: selectedChannel.id,
        channelName: selectedChannel.name
      },
      {
        headers: { 'Content-Type': 'application/json' }
      }
    );

    console.log(response.data, 'N8N Response for text');
    
    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç N8N (format: {"output": "{\"new_text\": \"...\"}", "isValidJson": true})
    let parsedData = null;
    if (response.data && response.data.output) {
      try {
        parsedData = JSON.parse(response.data.output);
        console.log(parsedData, 'Parsed N8N Text Data');
      } catch (error) {
        console.error('Failed to parse N8N output for text:', error);
      }
    }

    if (parsedData && parsedData.new_text) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
      if (!processedPost._regeneration_count) {
        processedPost._regeneration_count = { title: 0, text: 0 };
      }
      processedPost._regeneration_count.text++;

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      processedPost.post_text = parsedData.new_text;
      setUserProcessedPost(userId, processedPost);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
      await updatePostMessageLocal(ctx, processedPost);
      
      logger.info({
        msg: 'Description regenerated successfully',
        new_description: parsedData.new_text.substring(0, 100) + '...',
        regeneration_count: processedPost._regeneration_count.text
      });
    } else {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ");
    }
    
  } catch (error) {
    logger.error({
      msg: 'Failed to regenerate description',
      error: error instanceof Error ? error.message : String(error)
    });
    
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
 */
export async function publishPostHandler(ctx: MyContext) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    const processedPost = await getUserProcessedPost(userId);
    
    if (!processedPost) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");
      return;
    }

    await ctx.answerCallbackQuery("üì§ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç...");

    // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
    const success = await publishPostToChannel(ctx, processedPost);

    if (success) {
      await ctx.editMessageText(
        "‚úÖ **–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!**\n\n" +
        `üì∞ **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${processedPost.trigger_title}\n` +
        `üì¢ **–ö–∞–Ω–∞–ª:** ${ctx.session.selectedChannel?.name}\n\n` +
        "üéâ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª!",
        { parse_mode: "Markdown" }
      );
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      await clearUserProcessedPost(userId);
      
      // –û—á–∏—â–∞–µ–º pendingNewsRequest –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      if (ctx.session.pendingNewsRequest) {
        delete ctx.session.pendingNewsRequest;
        logger.info({
          msg: 'Cleared pendingNewsRequest after successful publication',
          userId
        });
      }
      
      logger.info({
        msg: 'Post published successfully to channel',
        title: processedPost.trigger_title,
      });
    } else {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª");
    }
    
  } catch (error) {
    logger.error({
      msg: 'Failed to publish post to channel',
      error: error instanceof Error ? error.message : String(error)
    });
    
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
 */
export async function cancelPostHandler(ctx: MyContext) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const processedPost = await getUserProcessedPost(userId);
    
    if (processedPost) {
      logger.info({
        msg: 'Post processing cancelled',
        userId: userId,
      });
    }
    
    await ctx.answerCallbackQuery("‚ùå –ü–æ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω");
    
    await ctx.editMessageText(
      "‚ùå **–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n" +
      "–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.",
      { parse_mode: "Markdown" }
    );
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    await clearUserProcessedPost(userId);
    
    // –û—á–∏—â–∞–µ–º pendingNewsRequest –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
    if (ctx.session.pendingNewsRequest) {
      delete ctx.session.pendingNewsRequest;
      logger.info({
        msg: 'Cleared pendingNewsRequest after cancellation',
        userId
      });
    }
    
  } catch (error) {
    logger.error({
      msg: 'Failed to cancel post',
      error: error instanceof Error ? error.message : String(error)
    });
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
async function updatePostMessageLocal(ctx: MyContext, processedPost: any) {
  await updatePostMessage(ctx, processedPost);
}

/**
 * –ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
 */
async function publishPostToChannel(ctx: MyContext, processedPost: any): Promise<boolean> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
    const selectedChannel = ctx.session.selectedChannel;
    if (!selectedChannel) {
      logger.error({
        msg: 'No channel selected for publishing',
        userId: ctx.from?.id
      });
      return false;
    }

    const channelId = channelService.getChannelId(selectedChannel);

    const {
      trigger_title,
      post_text,
      hashtags,
      main_post_image
    } = processedPost;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    let finalPostText = `${trigger_title}\n\n${post_text}`;
    
    if (hashtags && hashtags.length > 0) {
      finalPostText += `\n\n${hashtags.join(' ')}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
    if (main_post_image) {
      try {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        await ctx.api.sendPhoto(channelId, main_post_image, {
          caption: finalPostText,
          parse_mode: "HTML"
        });
        
        logger.info({
          msg: 'Post published with image successfully',
          channelId,
          channelName: selectedChannel.name,
          title: trigger_title,
          imageUrl: main_post_image
        });
        
      } catch (photoError) {
        logger.warn({
          msg: 'Failed to send post with image, trying without image',
          channelId,
          channelName: selectedChannel.name,
          title: trigger_title,
          imageUrl: main_post_image,
          error: photoError instanceof Error ? photoError.message : String(photoError)
        });
        
        // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await ctx.api.sendMessage(channelId, finalPostText, {
          parse_mode: "HTML",
          link_preview_options: {
            is_disabled: false
          }
        });
        
        logger.info({
          msg: 'Post published without image (fallback)',
          channelId,
          channelName: selectedChannel.name,
          title: trigger_title
        });
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.api.sendMessage(channelId, finalPostText, {
        parse_mode: "HTML",
        link_preview_options: {
          is_disabled: false
        }
      });
      
      logger.info({
        msg: 'Post published without image',
        channelId,
        channelName: selectedChannel.name,
        title: trigger_title
      });
    }

    logger.info({
      msg: 'Post published to channel successfully',
      channelId,
      channelName: selectedChannel.name,
      title: trigger_title
    });

    return true;

  } catch (error) {
    logger.error({
      msg: 'Failed to publish post to channel',
      error: error instanceof Error ? error.message : String(error)
    });
    return false;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏"
 */
export async function editHashtagsHandler(ctx: MyContext) {
  try {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("edit-hashtags");
  } catch (error) {
    logger.error({
      msg: 'Error in editHashtagsHandler',
      userId: ctx.from?.id,
      error: error instanceof Error ? error.message : String(error)
    });

    await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ö—ç—à—Ç–µ–≥–æ–≤");
  }
}
