import { logger } from "../../../utils/logger.js";
import { MyContext } from "../../../types/context.js";
import { clearUserNews } from "../../../services/webhook.js";

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"
 */
export async function clearSavedNewsHandler(ctx: MyContext) {
  const userId = ctx.from?.id;

  if (!userId) {
    await ctx.answerCallbackQuery("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    return;
  }

  try {
    logger.info({
      msg: 'Starting news clearing process',
      userId
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ —Å–µ—Å—Å–∏–∏
    const selectedChannel = ctx.session.selectedChannel;
    const channelId = selectedChannel?.id;
    
    // –û—á–∏—â–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const cleared = await clearUserNews(userId, channelId);

    logger.info({
      msg: 'News clearing completed',
      userId,
      cleared
    });

    if (cleared) {
      await ctx.answerCallbackQuery("‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã");
      await ctx.editMessageText(
        "üóëÔ∏è **–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã**\n\n" +
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π `/get_posts`",
        { parse_mode: "Markdown" }
      );

      logger.info({
        msg: 'Saved news cleared by user',
        userId
      });
    } else {
      await ctx.answerCallbackQuery("‚ÑπÔ∏è –ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      await ctx.editMessageText(
        "‚ÑπÔ∏è **–ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n" +
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
        { parse_mode: "Markdown" }
      );
    }

  } catch (error) {
    logger.error({
      msg: 'Failed to clear saved news',
      userId,
      error: error instanceof Error ? error.message : String(error)
    });

    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π");
    await ctx.editMessageText(
      "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π**\n\n" +
      `–î–µ—Ç–∞–ª–∏: ${error instanceof Error ? error.message : String(error)}`,
      { parse_mode: "Markdown" }
    );
  }
}
