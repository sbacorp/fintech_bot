import { logger } from "../../../utils/logger.js";
import { MyContext } from "../../../types/context.js";
import { config } from "../../../config/index.js";

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É —Å–µ–π—á–∞—Å"
 */
export async function runCronNowHandler(ctx: MyContext) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    const isAdmin = config.BOT_ADMIN_USER_IDS.includes(userId);
    const isMainCreator = config.MAIN_CONTENT_CREATOR_ID === userId;

    if (!isAdmin && !isMainCreator) {
      await ctx.answerCallbackQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
      return;
    }

    await ctx.answerCallbackQuery("üîÑ –ó–∞–ø—É—Å–∫–∞—é –∑–∞–¥–∞—á—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π...");

    // –ü–æ–ª—É—á–∞–µ–º scheduler –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const scheduler = (ctx as any).scheduler;
    
    if (!scheduler) {
      await ctx.reply("‚ùå Scheduler –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ");
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    const result = await scheduler.runNewsTaskNow();

    if (result.success) {
      let message = `‚úÖ **–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n` +
                   `üì∞ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: ${result.totalNews}\n` +
                   `üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${result.totalMessages}\n` +
                   `‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
      if (result.results && result.results.length > 0) {
        message += `\n\nüìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º:**\n`;
        
        for (const channelResult of result.results) {
          if (channelResult.success) {
            message += `‚úÖ **${channelResult.channelName}**: ${channelResult.newsCount || 0} –Ω–æ–≤–æ—Å—Ç–µ–π\n`;
          } else {
            message += `‚ùå **${channelResult.channelName}**: ${channelResult.error || '–û—à–∏–±–∫–∞'}\n`;
          }
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      message += `\n\nüéØ **–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:**\n`;
      message += `1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª: /select_channel\n`;
      message += `2Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: /view_posts\n`;
      message += `3Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–æ—Å—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n`;
      message += `üí° –ü–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞!`;

      await ctx.reply(message, { parse_mode: "Markdown" });
    } else {
      await ctx.reply(
        `‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏**\n\n` +
        `üö® –û—à–∏–±–∫–∞: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}\n\n` +
        `üîß **–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:**\n` +
        `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ n8n webhook\n` +
        `‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n` +
        `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏`,
        { parse_mode: "Markdown" }
      );
    }

    logger.info({
      msg: 'Manual cron task executed',
      userId,
      success: result.success,
      totalNews: result.totalNews,
      totalMessages: result.totalMessages
    });

  } catch (error) {
    logger.error({
      msg: 'Error in runCronNowHandler',
      userId: ctx.from?.id,
      error: error instanceof Error ? error.message : String(error)
    });

    await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏");
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á"
 */
export async function cronStatusHandler(ctx: MyContext) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    const isAdmin = config.BOT_ADMIN_USER_IDS.includes(userId);
    const isMainCreator = config.MAIN_CONTENT_CREATOR_ID === userId;

    if (!isAdmin && !isMainCreator) {
      await ctx.answerCallbackQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
      return;
    }

    await ctx.answerCallbackQuery("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á...");

    // –ü–æ–ª—É—á–∞–µ–º scheduler –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const scheduler = (ctx as any).scheduler;
    
    if (!scheduler) {
      await ctx.reply("‚ùå Scheduler –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö
    const tasksInfo = scheduler.getTasksInfo();
    
    let message = `üìä **–°—Ç–∞—Ç—É—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:**\n\n`;
    
    if (tasksInfo.length === 0) {
      message += `üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n\n`;
    } else {
      for (const task of tasksInfo) {
        message += `üìã **${task.name}**\n`;
        message += `üîÑ –°—Ç–∞—Ç—É—Å: ${task.running ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n`;
        message += `‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${task.nextRun || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n`;
      }
    }

    message += `‚è∞ **–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:** ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;

    await ctx.reply(message, { parse_mode: "Markdown" });

    logger.info({
      msg: 'Cron status requested',
      userId,
      tasksCount: tasksInfo.length
    });

  } catch (error) {
    logger.error({
      msg: 'Error in cronStatusHandler',
      userId: ctx.from?.id,
      error: error instanceof Error ? error.message : String(error)
    });

    await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
 */
export async function testNotificationHandler(ctx: MyContext) {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    const isAdmin = config.BOT_ADMIN_USER_IDS.includes(userId);
    const isMainCreator = config.MAIN_CONTENT_CREATOR_ID === userId;

    if (!isAdmin && !isMainCreator) {
      await ctx.answerCallbackQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
      return;
    }

    await ctx.answerCallbackQuery("üß™ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const testMessage = `üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Cron**\n\n` +
                       `‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n` +
                       `üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${userId}\n` +
                       `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}\n\n` +
                       `üéØ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`;

    await ctx.reply(testMessage, { parse_mode: "Markdown" });

    logger.info({
      msg: 'Test notification sent',
      userId
    });

  } catch (error) {
    logger.error({
      msg: 'Error in testNotificationHandler',
      userId: ctx.from?.id,
      error: error instanceof Error ? error.message : String(error)
    });

    await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
  }
}
