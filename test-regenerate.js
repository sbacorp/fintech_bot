#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoint regenerate_post_part
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node test-regenerate.js [action]
 * 
 * action: regenerate_title | regenerate_text (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é regenerate_title)
 */

const baseUrl = 'http://localhost:3000';

async function testRegeneratePostPart(action = 'regenerate_title') {
  console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é: ${action}`);
  console.log('=' * 50);

  try {
    const payload = {
      action: action,
      // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      current_title: action === 'regenerate_title' ? 
        'Bitcoin –Ω–µ —É–¥–µ—Ä–∂–∞–ª $113K ‚Äì –≥—Ä—è–¥—ë—Ç –Ω–æ–≤—ã–π –æ–±–≤–∞–ª?' : undefined,
      current_text: action === 'regenerate_text' ? 
        'üõë –ë—ã—á–∏–π –æ—Ç—Å–∫–æ–∫ –±–∏—Ç–∫–æ–∏–Ω–∞ –Ω–∞ $113K –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: —Å–ª–∞–±—ã–π –æ–±—ä—ë–º –∏ —Ü–µ–Ω–∞ –¥–∞—é—Ç –ø–æ–≤–æ–¥ –∂–¥–∞—Ç—å –ø–∞–¥–µ–Ω–∏—è –Ω–∏–∂–µ $112K. –ú–µ–¥–≤–µ–¥–∏ –≥–æ—Ç–æ–≤—è—Ç –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∞ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π —Å—Ä—ã–≤–∞. –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ö—É–¥—à–µ–º—É –∏–ª–∏ –∂–¥–∞—Ç—å —á—É–¥–æ? üî•' : undefined
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', JSON.stringify(payload, null, 2));
    
    const response = await fetch(`${baseUrl}/test/regenerate-post-part`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();
    
    console.log('\n‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:');
    console.log('=' * 50);
    
    if (result.success) {
      console.log('üéØ –î–µ–π—Å—Ç–≤–∏–µ:', result.action);
      console.log('üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ N8N:', JSON.stringify(result.request_data, null, 2));
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç N8N:', JSON.stringify(result.n8n_response, null, 2));
      
      if (action === 'regenerate_title' && result.n8n_response?.new_title) {
        console.log('\nüì∞ –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:');
        console.log(`"${result.n8n_response.new_title}"`);
      } else if (action === 'regenerate_text' && result.n8n_response?.new_text) {
        console.log('\nüìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:');
        console.log(`"${result.n8n_response.new_text}"`);
      }
      
      console.log('\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', result.test_user_id);
      
    } else {
      console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', result);
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –£–±–µ–¥–∏—Å—å —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
const action = process.argv[2] || 'regenerate_title';

if (!['regenerate_title', 'regenerate_text'].includes(action)) {
  console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π: regenerate_title –∏–ª–∏ regenerate_text');
  process.exit(1);
}

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint regenerate_post_part...\n');
testRegeneratePostPart(action);
